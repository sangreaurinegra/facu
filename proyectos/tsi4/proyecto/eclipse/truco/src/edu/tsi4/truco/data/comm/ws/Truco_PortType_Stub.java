// This class was generated by 172 StubGenerator.
// Contents subject to change without notice.
// @generated

package edu.tsi4.truco.data.comm.ws;

import javax.xml.rpc.JAXRPCException;
import javax.xml.namespace.QName;
import javax.microedition.xml.rpc.Operation;
import javax.microedition.xml.rpc.Type;
import javax.microedition.xml.rpc.ComplexType;
import javax.microedition.xml.rpc.Element;

public class Truco_PortType_Stub implements edu.tsi4.truco.data.comm.ws.Truco_PortType, javax.xml.rpc.Stub {
	private String[] _propertyNames;
	private Object[] _propertyValues;

	public Truco_PortType_Stub() {
		_propertyNames = new String[] {ENDPOINT_ADDRESS_PROPERTY};
		_propertyValues = new Object[] {"http://192.168.1.102:8080/truco-ws/services/truco"};
	}
	
	public Truco_PortType_Stub(String endpoint) {
		_propertyNames = new String[] {ENDPOINT_ADDRESS_PROPERTY};
		_propertyValues = new Object[] {endpoint};
	}

	public void _setProperty(String name, Object value) {
		int size = _propertyNames.length;
		for (int i = 0; i < size; ++i) {
			if (_propertyNames[i].equals(name)) {
				_propertyValues[i] = value;
				return;
			}
		}
		// Need to expand our array for a new property
		String[] newPropNames = new String[size + 1];
		System.arraycopy(_propertyNames, 0, newPropNames, 0, size);
		_propertyNames = newPropNames;
		Object[] newPropValues = new Object[size + 1];
		System.arraycopy(_propertyValues, 0, newPropValues, 0, size);
		_propertyValues = newPropValues;

		_propertyNames[size] = name;
		_propertyValues[size] = value;
	}

	public Object _getProperty(String name) {
		for (int i = 0; i < _propertyNames.length; ++i) {
			if (_propertyNames[i].equals(name)) {
				return _propertyValues[i];
			}
		}
		if (ENDPOINT_ADDRESS_PROPERTY.equals(name) || USERNAME_PROPERTY.equals(name) || PASSWORD_PROPERTY.equals(name)) {
			return null;
		}
		if (SESSION_MAINTAIN_PROPERTY.equals(name)) {
			return new java.lang.Boolean(false);
		}
		throw new JAXRPCException("Stub does not recognize property: "+name);
	}

	protected void _prepOperation(Operation op) {
		for (int i = 0; i < _propertyNames.length; ++i) {
			op.setProperty(_propertyNames[i], _propertyValues[i].toString());
		}
	}

	// 
	//  Begin user methods
	// 

	public edu.tsi4.truco.data.comm.ws.EnviarResponse enviar(java.lang.String in0, java.lang.String in1, java.lang.String in2) throws java.rmi.RemoteException {
		// Copy the incoming values into an Object array if needed.
		Object[] inputObject = new Object[3];
		inputObject[0] = in0;
		inputObject[1] = in1;
		inputObject[2] = in2;

		Operation op = Operation.newInstance(_qname_enviar, _type_enviar, _type_enviarResponse);
		_prepOperation(op);
		op.setProperty(Operation.SOAPACTION_URI_PROPERTY, "");
		Object resultObj;
		try {
			resultObj = op.invoke(inputObject);
		} catch (JAXRPCException e) {
			Throwable cause = e.getLinkedCause();
			if (cause instanceof java.rmi.RemoteException) {
				throw (java.rmi.RemoteException) cause;
			}
			throw e;
		}
		edu.tsi4.truco.data.comm.ws.EnviarResponse result;
		// Convert the result into the right Java type.
		if (resultObj == null) {
			result = null;
		} else {
			result = new edu.tsi4.truco.data.comm.ws.EnviarResponse();
		}
		return result;
	}

	public java.lang.String recibir(java.lang.String in0, java.lang.String in1) throws java.rmi.RemoteException {
		// Copy the incoming values into an Object array if needed.
		Object[] inputObject = new Object[2];
		inputObject[0] = in0;
		inputObject[1] = in1;

		Operation op = Operation.newInstance(_qname_recibir, _type_recibir, _type_recibirResponse);
		_prepOperation(op);
		op.setProperty(Operation.SOAPACTION_URI_PROPERTY, "");
		Object resultObj;
		try {
			resultObj = op.invoke(inputObject);
		} catch (JAXRPCException e) {
			Throwable cause = e.getLinkedCause();
			if (cause instanceof java.rmi.RemoteException) {
				throw (java.rmi.RemoteException) cause;
			}
			throw e;
		}
		java.lang.String result;
		// Convert the result into the right Java type.
		// Unwrapped return value
		Object outObj = ((Object[])resultObj)[0];
		result = (java.lang.String)outObj;
		return result;
	}
	// 
	//  End user methods
	// 

	protected static final QName _qname_enviar = new QName("http://truco.tsi4.edu", "enviar");
	protected static final QName _qname_enviarResponse = new QName("http://truco.tsi4.edu", "enviarResponse");
	protected static final QName _qname_in0 = new QName("http://truco.tsi4.edu", "in0");
	protected static final QName _qname_in1 = new QName("http://truco.tsi4.edu", "in1");
	protected static final QName _qname_in2 = new QName("http://truco.tsi4.edu", "in2");
	protected static final QName _qname_out = new QName("http://truco.tsi4.edu", "out");
	protected static final QName _qname_recibir = new QName("http://truco.tsi4.edu", "recibir");
	protected static final QName _qname_recibirResponse = new QName("http://truco.tsi4.edu", "recibirResponse");
	protected static final Element _type_enviar;
	protected static final Element _type_enviarResponse;
	protected static final Element _type_recibir;
	protected static final Element _type_recibirResponse;
	static {
		// Create all of the Type's that this stub uses, once.
		Element _type_in0;
		_type_in0 = new Element(_qname_in0, Type.STRING, 1, 1, true);
		Element _type_in1;
		_type_in1 = new Element(_qname_in1, Type.STRING, 1, 1, true);
		Element _type_in2;
		_type_in2 = new Element(_qname_in2, Type.STRING, 1, 1, true);
		ComplexType _complexType_enviar;
		_complexType_enviar = new ComplexType();
		_complexType_enviar.elements = new Element[3];
		_complexType_enviar.elements[0] = _type_in0;
		_complexType_enviar.elements[1] = _type_in1;
		_complexType_enviar.elements[2] = _type_in2;
		_type_enviar = new Element(_qname_enviar, _complexType_enviar);
		ComplexType _complexType_enviarResponse;
		_complexType_enviarResponse = new ComplexType();
		_complexType_enviarResponse.elements = new Element[0];
		_type_enviarResponse = new Element(_qname_enviarResponse, _complexType_enviarResponse);
		ComplexType _complexType_recibir;
		_complexType_recibir = new ComplexType();
		_complexType_recibir.elements = new Element[2];
		_complexType_recibir.elements[0] = _type_in0;
		_complexType_recibir.elements[1] = _type_in1;
		_type_recibir = new Element(_qname_recibir, _complexType_recibir);
		Element _type_out;
		_type_out = new Element(_qname_out, Type.STRING, 1, 1, true);
		ComplexType _complexType_recibirResponse;
		_complexType_recibirResponse = new ComplexType();
		_complexType_recibirResponse.elements = new Element[1];
		_complexType_recibirResponse.elements[0] = _type_out;
		_type_recibirResponse = new Element(_qname_recibirResponse, _complexType_recibirResponse);
	}

}
