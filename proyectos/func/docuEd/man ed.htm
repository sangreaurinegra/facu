<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0061)http://www.fing.edu.uy/inco/cursos/progfunc/tareas/etc/ed.htm -->
<HTML><HEAD><TITLE>man: ed</TITLE>
<META content="text/html; charset=windows-1252" http-equiv=Content-Type>
<META content="MSHTML 5.00.2614.3500" name=GENERATOR></HEAD>
<BODY background="" bgColor=#ffffff>
<HR>

<H2>NAME</H2><PRE>       ed - text editor


</PRE>
<H2>SYNOPSIS</H2><PRE>       ed [-] [-sx] [-p <I>string</I>] [<I>file</I>]


</PRE>
<H2>DESCRIPTION</H2><PRE>       <B>ed</B>  is a line-oriented text editor.  It is used to create,
       display, modify and otherwise manipulate text files.

       If invoked with a <I>file</I> argument, then a copy  of	 <I>file</I>  is
       read  into  the editor's buffer.	 Changes are made to this
       copy and not directly to <I>file</I> itself.  Upon  quitting  <B>ed</B>,
       any  changes  not explicitly saved  with a <I>`w'</I> command are
       lost.

       Editing is done in two distinct modes: <I>command</I> and  <I>input</I>.
       When  first  invoked, <B>ed</B> is in command mode.  In this mode
       commands are read from the standard input and executed  to
       manipulate  the	contents of the editor buffer.	A typical
       command might look like:

	      ,s/<I>old</I>/<I>new</I>/g

       which replaces all occurrences of the string <I>old</I> with <I>new</I>.

       When  an input command, such as <I>`a'</I> (append), <I>`i'</I> (insert)
       or <I>`c'</I> (change), is given, <B>ed</B> enters input mode.	 This  is
       the primary means of adding text to a file.  In this mode,
       no commands are available; instead, the standard input  is
       written	directly  to the editor buffer.	 Lines consist of
       text up to and including a <I>newline</I> character.  Input  mode
       is  terminated by entering a single period  (<I>.</I>) on a line.

       All <B>ed</B> commands operate on whole lines or ranges of lines;
       e.g., the <I>`d'</I> command deletes lines; the <I>`m'</I> command moves
       lines, and so on.  It is possible to modify only a portion
       of  a  line  by	means  of  replacement, as in the example
       above.  However even here, the <I>`s'</I> command is  applied  to
       whole lines at a time.

       In  general,  <B>ed</B>	 commands  consist  of	zero or more line
       addresses, followed by a single character command and pos-
       sibly  additional  parameters;  i.e.,  commands	have  the
       structure:

	      <I>[address</I> <I>[,address]]command[parameters]</I>

       The address(es) indicate the line or range of lines to  be
       affected	 by  the  command.   If fewer addresses are given
       than the command accepts, then default addresses are  sup-
       plied.


   <B>OPTIONS</B>
       -s      Suppresses  diagnostics.	 This  should  be used if
	       <B>ed</B>'s standard input is from a script.


       -x      Prompts for an encryption key to be used in subse-
	       quent reads and writes (see the <I>`x'</I> command).


       -p <I>string</I>
	       Specifies  a  command prompt.  This may be toggled
	       on and off with the <I>`P'</I> command.


       <I>file</I>    Specifies the name of a file to read.  If <I>file</I>  is
	       prefixed	 with  a bang (!), then it is interpreted
	       as a shell command.  In this case, what is read is
	       the  standard  output  of <I>file</I> executed via <B>sh(1)</B>.
	       To read a file whose name begins with a bang, pre-
	       fix  the	 name  with a backslash (\).  The default
	       filename is set to <I>file</I> only if it is not prefixed
	       with a bang.


       An  address represents the number of a line in the buffer.
       <B>ed</B> maintains a <I>current</I> <I>address</I> which is typically supplied
       to commands as the default address when none is specified.
       When a file is first read,  the current address is set  to
       the  last  line	of  the	 file.	 In  general, the current
       address is set to the last line affected by a command.

       A line address is constructed from one of the bases in the
       list  below, optionally followed by a numeric offset.  The
       offset may include any combination  of  digits,	operators
       (i.e.,  <I>+</I>,  <I>-</I>  and  <I>^</I>) and whitespace.  Addresses are read
       from left to right, and their values are computed relative
       to the current address.

       One  exception  to  the rule that addresses represent line
       numbers is the address <I>0</I> (zero).	 This means  "before  the
       first line," and is legal wherever it makes sense.

       An  address  range  is two addresses separated either by a
       comma or semi-colon. The value of the first address  in	a
       range  cannot exceed the value of the second.  If only one
       address is given in a range, then the  second  address  is
       set  to	the given address.  If an <I>n-</I>tuple of addresses is
       given where <I>n</I> <I>&gt;</I> <I>2,</I> then the corresponding range is  deter-
       mined  by  the last two addresses in the <I>n-</I>tuple.  If only
       one address is expected, then the last address is used.

       Each address in a  comma-delimited  range  is  interpreted
       relative	 to  the current address.  In a semi-colon-delim-
       ited range, the first address is used to set  the  current
       address, and the second address is interpreted relative to
       the first.


       The following address symbols are recognized.


       .       The current line (address) in the buffer.


       $       The last line in the buffer.


       n       The <I>n</I>th, line in the buffer where <I>n</I> is a number in
	       the range <I>[0,$].</I>


       - or ^  The  previous  line.  This is equivalent to <I>-1</I> and
	       may be repeated with cumulative effect.


       -<I>n</I> or ^<I>n</I>
	       The <I>n</I>th previous line, where <I>n</I> is  a  non-negative
	       number.


       +       The  next  line.	 This is equivalent to <I>+1</I> and may
	       be repeated with cumulative effect.


       +<I>n</I> or whitespace<I>n</I>
	       The <I>n</I>th next line, where <I>n</I> is a non-negative  num-
	       ber.   <I>whitespace</I> followed by a number <I>n</I> is inter-
	       preted as <I>+n</I>.


       , or <B>%</B>  The first through last lines in the buffer.   This
	       is equivalent to the address range <I>1,$.</I>


       ;       The  current  through  last  lines  in the buffer.
	       This is equivalent to the address range <I>.,$.</I>


       /<I>re/</I>    The next line containing	 the  regular  expression
	       <I>re</I>.   The  search  wraps	 to  the beginning of the
	       buffer and continues down to the current line,  if
	       necessary.  // repeats the last search.


       ?<I>re?</I>    The  previous  line containing the regular expres-
	       sion <I>re</I>.	 The search  wraps  to	the  end  of  the
	       buffer  and  continues  up to the current line, if
	       necessary.  ?? repeats the last search.


       '<I>lc</I>     The line previously marked by a	<I>`k'</I>  (mark)  com-
	       mand, where <I>lc</I> is a lower case letter.


   <B>REGULAR</B> <B>EXPRESSIONS</B>
       Regular	expressions  are patterns used in selecting text.
       For example, the <B>ed</B> command

	      g/<I>string</I>/

       prints all lines containing <I>string</I>.   Regular  expressions
       are also used by the <I>`s'</I> command for selecting old text to
       be replaced with new.

       In addition  to	a  specifying  string  literals,  regular
       expressions  can	 represent  classes  of strings.  Strings
       thus represented are said to be matched by the correspond-
       ing  regular  expression.  If it is possible for a regular
       expression to match several strings in a	 line,	then  the
       left-most longest match is the one selected.

       The  following  symbols	are  used in constructing regular
       expressions:


       c       Any character <I>c</I> not listed below,  including  `{',
	       '}', `(', `)', `&lt;' and `&gt;', matches itself.


       \<I>c</I>      Any backslash-escaped character <I>c</I>, except for `{',
	       '}', `(', `)', `&lt;' and `&gt;', matches itself.


       Matches any single character.


       <I>[char-class]</I>
	       Matches any single character  in	 <I>char-class</I>.   To
	       include a  `]' in <I>char-class</I>, it must be the first
	       character.  A range of characters may be specified
	       by separating the end characters of the range with
	       a `-', e.g., `a-z' specifies the lower case  char-
	       acters.	 The  following	 literal  expressions can
	       also be used in	<I>char-class</I>  to	specify	 sets  of
	       characters:

		 [:alnum:]  [:cntrl:]  [:lower:]  [:space:]
		 [:alpha:]  [:digit:]  [:print:]  [:upper:]
		 [:blank:]  [:graph:]  [:punct:]  [:xdigit:]

	       If  `-'	appears as the first or last character of
	       <I>char-class</I>, then it  matches  itself.   All  other
	       characters in <I>char-class</I> match themselves.

	       Patterns in <I>char-class</I> of the form:

		 [.<I>col-elm</I>.] or,   [=<I>col-elm</I>=]

	       where  <I>col-elm</I>  is  a <I>collating</I> <I>element</I> are inter-
	       preted according to <B>locale(5)</B> (not currently  sup-
	       ported).	 See <B>regex(3)</B> for an explanation of these
	       constructs.

       [^<I>char-class</I>]
	       Matches any single character, other than	 newline,
	       not  in	<I>char-class</I>.   <I>char-class</I>  is  defined  as
	       above.

       ^       If `^' is the first character of a regular expres-
	       sion,  then  it	anchors the regular expression to
	       the beginning of a line.	  Otherwise,  it  matches
	       itself.

       $       If  `$' is the last character of a regular expres-
	       sion, it anchors the regular expression to the end
	       of a line.  Otherwise, it matches itself.

       \&lt;      Anchors the single character regular expression or
	       subexpression  immediately  following  it  to  the
	       beginning of a word.  (This may not be available)

       \&gt;      Anchors the single character regular expression or
	       subexpression immediately following it to the  end
	       of a word.  (This may not be available)

       \(<I>re</I>\)  Defines a subexpression <I>re</I>.  Subexpressions may be
	       nested.	A subsequent backreference  of	the  form
	       <I>`\n'</I>,  where  <I>n</I>	is  a  number in the range [1,9],
	       expands to the text matched by the <I>n</I>th  subexpres-
	       sion.	For   example,	 the  regular  expression
	       `\(.*\)\1' matches any string consisting of  iden-
	       tical  adjacent	substrings.   Subexpressions  are
	       ordered relative to their left delimiter.

       *       Matches the single character regular expression or
	       subexpression  immediately  preceding  it  zero or
	       more times.  If '*' is the first	 character  of	a
	       regular	 expression  or	 subexpression,	 then  it
	       matches itself.	The `*' operator sometimes yields
	       unexpected  results.   For  example,  the  regular
	       expression  `b*'	 matches  the  beginning  of  the
	       string `abbb' (as opposed to the substring `bbb'),
	       since a null match is the only left-most match.

       \{<I>n,m</I>\} or \{<I>n,</I>\} or \{<I>n</I>\}
	       Matches the single character regular expression or
	       subexpression  immediately preceding it at least <I>n</I>
	       and at most <I>m</I> times.  If <I>m</I>  is  omitted,	 then  it
	       matches	at  least  <I>n</I> times.  If the comma is also
	       omitted, then it matches exactly <I>n</I> times.

       Additional regular expression  operators	 may  be  defined
       depending on the particular <B>regex(3)</B> implementation.

   <B>COMMANDS</B>
       All <B>ed</B> commands are single characters, though some require
       additional parameters.  If a command's  parameters  extend
       over  several  lines,  then  each line except for the last
       must be terminated with a backslash (\).

       In general, at most one command is allowed per line.  How-
       ever, most commands accept a print suffix, which is any of
       <I>`p'</I> (print), <I>`l'</I> (list) , or <I>`n'</I> (enumerate), to print the
       last line affected by the command.

       An interrupt (typically ^C) has the effect of aborting the
       current command and returning the editor to command  mode.

       <B>ed</B>  recognizes  the  following commands.	 The commands are
       shown together with the default address or  address  range
       supplied if none is specified (in parenthesis).

       (.)a    Appends	text  to  the  buffer after the addressed
	       line.  Text is entered in input mode.  The current
	       address is set to last line entered.

       (.,.)c  Changes	lines in the buffer.  The addressed lines
	       are deleted from the buffer, and text is	 appended
	       in  their  place.   Text is entered in input mode.
	       The current address is set to last line entered.

       (.,.)d  Deletes the addressed lines from the  buffer.   If
	       there  is a line after the deleted range, then the
	       current address is set to this line. Otherwise the
	       current	address	 is  set  to  the line before the
	       deleted range.

       e <I>file</I>  Edits <I>file</I>, and sets  the  default  filename.   If
	       <I>file</I>  is not specified, then the	 default filename
	       is used.	 Any lines  in	the  buffer  are  deleted
	       before  the new file is read.  The current address
	       is set to the last line read.

       e <I>!command</I>
	       Edits the  standard  output  of	<I>`!command'</I>,  (see
	       !<I>command</I>	  below).    The   default   filename  is
	       unchanged.  Any lines in the  buffer  are  deleted
	       before the output of <I>command</I> is read.  The current
	       address is set to the last line read.

       E <I>file</I>  Edits <I>file</I> unconditionally.  This  is  similar  to
	       the  <I>e</I>  command, except that unwritten changes are
	       discarded without warning.  The current address is
	       set to the last line read.

       f <I>file</I>  Sets the default filename to <I>file</I>.  If <I>file</I> is not
	       specified, then the default unescaped filename  is
	       printed.

       (1,$)g<I>/re/command-list</I>
	       Applies	<I>command-list</I>  to  each	of  the addressed
	       lines matching a regular expression <I>re</I>.	The  cur-
	       rent  address is set to the line currently matched
	       before <I>command-list</I> is executed.	 At  the  end  of
	       the <I>`g'</I> command, the current address is set to the
	       last line affected by <I>command-list</I>.

	       Each command in <I>command-list</I> must be on a separate
	       line,  and  every line except for the last must be
	       terminated by a backslash (\).  Any  commands  are
	       allowed,	 except	 for  <I>`g'</I>,  <I>`G'</I>, <I>`v'</I>, and <I>`V'</I>.	A
	       newline alone in <I>command-list</I> is equivalent  to	a
	       <I>`p'</I> command.

       (1,$)G<I>/re/</I>
	       Interactively edits the addressed lines matching a
	       regular expression <I>re.</I>  For  each  matching  line,
	       the  line  is printed, the current address is set,
	       and the user is prompted to enter a  <I>command-list</I>.
	       At the end of the <I>`G'</I> command, the current address
	       is set to the last line	affected  by  (the  last)
	       <I>command-list</I>.

	       The  format of <I>command-list</I> is the same as that of
	       the <I>`g'</I> command.	 A newline alone acts as  a  null
	       command	list.  A single `&amp;' repeats the last non-
	       null command list.

       H       Toggles the printing of	error  explanations.   By
	       default, explanations are not printed.  It is rec-
	       ommended that ed scripts begin with  this  command
	       to aid in debugging.

       h       Prints an explanation of the last error.

       (.)i    Inserts	text  in  the  buffer  before the current
	       line.  Text is entered in input mode.  The current
	       address is set to the last line entered.

       (.,.+1)j
	       Joins  the  addressed  lines.  The addressed lines
	       are deleted from the buffer and replaced by a sin-
	       gle  line  containing their joined text.	 The cur-
	       rent address is set to the resultant line.

       (.)k<I>lc</I>  Marks a line with a lower  case	letter	<I>lc</I>.   The
	       line  can then be addressed as <I>'lc</I> (i.e., a single
	       quote followed by <I>lc</I>  )	in  subsequent	commands.
	       The  mark is not cleared until the line is deleted
	       or otherwise modified.

       (.,.)l  Prints the addressed lines  unambiguously.   If	a
	       single line fills for than one screen (as might be
	       the  case  when	viewing	 a   binary   file,   for
	       instance),  a  `--More--' prompt is printed on the
	       last line.  <B>ed</B>  waits  until  the  RETURN  key  is
	       pressed	before	displaying  the next screen.  The
	       current address is set to the last line printed.

       (.,.)m(.)
	       Moves lines in the buffer.   The	 addressed  lines
	       are  moved  to  after  the  right-hand destination
	       address, which may be the address <I>0</I>  (zero).   The
	       current address is set to the last line moved.

       (.,.)n  Prints  the  addressed lines along with their line
	       numbers.	 The current address is set to	the  last
	       line printed.

       (.,.)p  Prints the addressed lines. The current address is
	       set to the last line printed.

       P       Toggles the command prompt on and off.	Unless	a
	       prompt  was  specified by with command-line option
	       <I>-p</I> <I>string</I>, the command prompt is by default turned
	       off.

       q       Quits ed.

       Q       Quits  ed unconditionally.  This is similar to the
	       <I>q</I> command, except that unwritten changes are  dis-
	       carded without warning.

       ($)r <I>file</I>
	       Reads  <I>file</I>  to after the addressed line.  If <I>file</I>
	       is not specified, then  the  default  filename  is
	       used.   If  there was no default filename prior to
	       the command, then the default filename is  set  to
	       <I>file</I>.	Otherwise,   the   default   filename  is
	       unchanged.  The current address is set to the last
	       line read.

       ($)r <I>!command</I>
	       Reads  to  after	 the  addressed line the standard
	       output of <I>`!command'</I>, (see  the	!<I>command</I>  below).
	       The  default  filename  is unchanged.  The current
	       address is set to the last line read.

       (.,.)s<I>/re/replacement/</I>
       (.,.)s<I>/re/replacement/</I>g
       (.,.)s<I>/re/replacement/n</I>
	       Replaces text in the addressed  lines  matching	a
	       regular	 expression   <I>re</I>  with	<I>replacement</I>.   By
	       default, only the first	match  in  each	 line  is
	       replaced.   If  the  <I>`g'</I> (global) suffix is given,
	       then every match to be replaced.	 The <I>`n'</I>  suffix,
	       where  <I>n</I> is a positive number, causes only the <I>n</I>th
	       match to be replaced.  It is an error if	 no  sub-
	       stitutions  are	performed on any of the addressed
	       lines.  The current address is set the  last  line
	       affected.

	       <I>re</I> and <I>replacement</I> may be delimited by any charac-
	       ter other than space and newline (see the <I>`s'</I> com-
	       mand below).  If one or two of the last delimiters
	       is omitted, then the last line affected is printed
	       as though the print suffix <I>`p'</I> were specified.


	       An unescaped `&amp;' in <I>replacement</I> is replaced by the
	       currently matched text.	 The  character	 sequence
	       <I>`\m'</I>,  where  <I>m</I> is a number in the range [1,9], is
	       replaced by the <I>m</I>th  backreference  expression  of
	       the  matched  text.   If <I>replacement</I> consists of a
	       single `%', then <I>replacement</I> from the last substi-
	       tution  is  used.   Newlines  may  be  embedded in
	       <I>replacement</I> if they are escaped with  a	backslash
	       (\).

       (.,.)s  Repeats	the  last substitution.	 This form of the
	       <I>`s'</I> command accepts a count  suffix  <I>`n'</I>,  or  any
	       combination  of	the characters <I>`r'</I>, <I>`g'</I>, and <I>`p'</I>.
	       If a count suffix <I>`n'</I> is given, then only the  <I>n</I>th
	       match is replaced.  The <I>`r'</I> suffix causes the reg-
	       ular expression of the  last  search  to	 be  used
	       instead of the that of the last substitution.  The
	       <I>`g'</I> suffix toggles the global suffix of	the  last
	       substitution.   The  <I>`p'</I>	 suffix toggles the print
	       suffix  of  the	last  substitution  The	  current
	       address is set to the last line affected.

       (.,.)t(.)
	       Copies  (i.e.,  transfers)  the addressed lines to
	       after the right-hand  destination  address,  which
	       may  be the address <I>0</I> (zero).  The current address
	       is set to the last line copied.

       u       Undoes the last command and restores  the  current
	       address	to  what  it was before the command.  The
	       global commands	<I>`g'</I>,  <I>`G'</I>,  <I>`v'</I>,  and  <I>`V'</I>.   are
	       treated	as  a single command by undo.  <I>`u'</I> is its
	       own inverse.

       (1,$)v<I>/pat/command-list</I>
	       Applies <I>command-list</I>  to	 each  of  the	addressed
	       lines  not matching a regular expression <I>re</I>.  This
	       is similar to the <I>`g'</I> command.

       (1,$)V<I>/re/</I>
	       Interactively edits the addressed lines not match-
	       ing  a  regular expression <I>re.</I>  This is similar to
	       the <I>`G'</I> command.

       (1,$)w <I>file</I>
	       Writes the addressed lines to <I>file</I>.  Any	 previous
	       contents	 of  <I>file</I>  is  lost  without warning.  If
	       there is no default  filename,  then  the  default
	       filename	  is   set   to	 <I>file,</I>	otherwise  it  is
	       unchanged.  If no filename is specified, then  the
	       default	filename is used.  The current address is
	       unchanged.

       (1,$)wq <I>file</I>
	       Writes the addressed lines to <I>file</I>, and then  exe-
	       cutes a <I>`q'</I> command.

       (1,$)w <I>!command</I>
	       Writes  the  addressed lines to the standard input
	       of <I>`!command'</I>,  (see  the  !<I>command</I>  below).   The
	       default	 filename   and	  current   address   are
	       unchanged.

       (1,$)W <I>file</I>
	       Appends the addressed lines to the  end	of  <I>file</I>.
	       This  is	 similar  to the <I>`w'</I> command, expect that
	       the previous contents of file  is  not  clobbered.
	       The current address is unchanged.

       x       Prompts	for  an	 encryption  key which is used in
	       subsequent reads and writes.  If a  newline  alone
	       is  entered  as the key, then encryption is turned
	       off.  Otherwise, echoing is disabled while  a  key
	       is  read.  Encryption/decryption is done using the
	       <B>bdes(1)</B> algorithm.

       (.+1)z<I>n</I> Scrolls <I>n</I> lines at a time  starting  at	addressed
	       line.   If  <I>n</I>  is  not specified, then the current
	       window size is used.  The current address  is  set
	       to the last line printed.

       !<I>command</I>
	       Executes	 <I>command</I> via <B>sh(1)</B>.  If the first charac-
	       ter of <I>command</I> is `!', then it is replaced by text
	       of  the	previous <I>`!command'</I>.  <B>ed</B> does not process
	       <I>command</I> for backslash (\)  escapes.   However,  an
	       unescaped <I>`%'</I> is replaced by the default filename.
	       When the shell returns from execution, a	 `!'   is
	       printed	to the standard output.	 The current line
	       is unchanged.

       ($)=    Prints the line number of the addressed line.

       (.+1)newline
	       Prints the addressed line, and  sets  the  current
	       address to that line.


</PRE>
<H2>FILES</H2><PRE>       /tmp/ed.*	   Buffer file
       ed.hup		   The file to which <B>ed</B> attempts to write
			   the	buffer if the terminal hangs  up.


</PRE>
<H2>SEE ALSO</H2><PRE>       <B>vi(1)</B>, <B>sed(1)</B>, <B>regex(3)</B>, <B>bdes(1)</B>, <B>sh(1)</B>.

       USD:12-13

       B.  W. Kernighan and P. J. Plauger, <I>Software</I> <I>Tools</I> <I>in</I> <I>Pas-</I>
       <I>cal</I> <I>,</I> Addison-Wesley, 1981.


</PRE>
<H2>LIMITATIONS</H2><PRE>       <B>ed</B> processes <I>file</I> arguments for backslash  escapes,  i.e.,
       in  a filename, any characters preceded by a backslash (\)
       are interpreted literally.

       If a text (non-binary) file is not terminated by a newline
       character,  then <B>ed</B> appends one on reading/writing it.  In
       the case of a binary file, <B>ed</B> does not append a newline on
       reading/writing.

       per line overhead: 4 ints


</PRE>
<H2>DIAGNOSTICS</H2><PRE>       When  an	 error occurs, <B>ed</B> prints a `?' and either returns
       to command mode or exits if its input is	 from  a  script.
       An  explanation	of the last error can be printed with the
       <I>`h'</I> (help) command.

       Since the <I>`g'</I> (global)  command	 masks	any  errors  from
       failed  searches and substitutions, it can be used to per-
       form conditional operations in scripts; e.g.,

	      g/<I>old</I>/s//<I>new</I>/

       replaces any occurrences of <I>old</I>	with  <I>new</I>.   If	 the  <I>`u'</I>
       (undo)  command	occurs in a global command list, then the
       command list is executed only once.

       If diagnostics are not disabled, attempting to quit <B>ed</B>  or
       edit another file before writing a modified buffer results
       in an error.  If the command is entered a second time,  it
       succeeds, but any changes to the buffer are lost.



			   21 May 1993
</PRE>
<ADDRESS></ADDRESS></BODY></HTML>
